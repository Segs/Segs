language: generic # prevent travis from overriding provided compilers.
cache:
  ccache: true    # includes $HOME/.ccache and adds /usr/lib/ccache to $PATH
# directories:
#   - 3rd_party   # this is sometimes breaking subsequent Travis builds
dist: bionic

notifications:
  email: false
  webhooks: https://segs.dev/travis/travis-ci.php
    
env:
  global:
    # Ubuntu version
    - LINUX_DIST=bionic
    - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps
    # Global build options and C++ flags
    - CXX_FLAGS="-Wall -pedantic"
    - CCACHE_TEMPDIR=/tmp/.ccache-temp
    - CCACHE_COMPRESS=1
    - CASHER_TIME_OUT=1000
    - QT=512
    
addons_shortcuts:
  addons_clang50: &clang50
    apt:
      sources: [ 'ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-5.0']
      packages: [ 'clang-5.0', 'clang-tidy-5.0' ]
  addons_gcc5: &gcc5
    apt:
      sources: [ 'ubuntu-toolchain-r-test' ]
      packages: [ 'g++-5', 'gcc-5' ]
  addons_gcc6: &gcc6
    apt:
      sources: [ 'ubuntu-toolchain-r-test' ]
      packages: [ 'g++-6', 'gcc-6' ]
  addons_gcc7: &gcc7
    apt:
      sources: [ 'ubuntu-toolchain-r-test' ]
      packages: [ 'g++-7', 'gcc-7' ]

matrix:
  include:
    - os: linux
      dist: bionic
      env: BUILD='Debug' GCC=9
      before_install:
        - curl -L https://github.com/Kitware/CMake/releases/download/v3.16.4/cmake-3.16.4-Linux-x86_64.tar.gz -o cmake-3.16.4-Linux-x86_64.tar.gz
        - tar xf cmake-3.16.4-Linux-x86_64.tar.gz
        - export PATH=${PWD}/cmake-3.16.4-Linux-x86_64/bin:${PATH}
        - cmake --version
    - os: osx
      osx_image: xcode9.2
      compiler: clang
      env: BUILD='Debug'

before_install:
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo add-apt-repository ppa:beineri/opt-qt-5.12.2-xenial -y; fi
  - |
    if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      sudo apt-get update -qq;
    else
      brew update;
    fi
#  - if [ -n "$CLANG_VERSION" ]; then sudo PATH="${PATH}" CXX="$CXX" CC="$CC" ./ci_support/install_libcxx.sh; fi
  
install:
#  - |
#    if [ "$LIBCXX" == "On" ]; then
#      CXX_FLAGS="${CXX_FLAGS} -stdlib=libc++ -nostdinc++ -cxx-isystem /usr/include/c++/v1/ -Wno-unused-command-line-argument";
#      CXX_LINKER_FLAGS="${CXX_LINKER_FLAGS} -lc++abi";
#    fi
  - |
    if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      sudo apt-get install -qq libgl1-mesa-dev qt512base qt512declarative qt512websockets qt512quickcontrols2; source /opt/qt512/bin/qt512-env.sh;
      CMAKE_OPTS="";
    else
      brew install cppcheck qt;
      brew link --force qt;
      export PATH="/usr/local/opt/qt/bin:$PATH" # missing mkspecs fix
      QT5_CMAKE_PREFIX=$(ls -d $(brew --cellar)/qt/*/lib/cmake);
      CMAKE_OPTS="-DCMAKE_PREFIX_PATH=${QT5_CMAKE_PREFIX}";
    fi
    export CMAKE_OPTS;
  
script:
  - mkdir build
  - cd build
  - |
    if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      cmake .. -DCMAKE_BUILD_TYPE=${BUILD} -DCMAKE_PREFIX_PATH="$(ls -d $(brew --cellar)/qt/*/lib/cmake)" -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" -DCMAKE_EXE_LINKER_FLAGS="${CXX_LINKER_FLAGS}" -DBUILD_WITH_CCACHE=1  -DCLANG_TIDY=$(which ${CLANG_TIDY});
    else
      cmake .. -DCMAKE_BUILD_TYPE=${BUILD} -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" -DCMAKE_EXE_LINKER_FLAGS="${CXX_LINKER_FLAGS}" -DBUILD_WITH_CCACHE=1  -DCLANG_TIDY=$(which ${CLANG_TIDY});
    fi
  - make VERBOSE=1
# ctest --output-on-failure
