/*
 * SEGS - Super Entity Game Server - dbtool Migration
 * http://www.segs.io/
 * Copyright (c) 2006 - 2019 SEGS Team (see AUTHORS.md)
 * This software is licensed under the terms of the 3-clause BSD License. See LICENSE.md for details.
 */

#pragma once
#include "Utilities/dbtool/DBMigrationStep.h"

class SEGS_Game_Migration_009 : public DBMigrationStep
{
private:
    int m_target_version = 9;
    QString m_name = SEGS_GAME_DB_NAME;
    std::vector<TableSchema> m_table_schemas = {
        {"db_version", 9, "2018-10-22 22:56:43"},
        {"characters", 9, "2018-10-22 22:56:43"},
        {"supergroups", 2, "2018-10-22 22:56:43"},
    };

public:
    int getTargetVersion() const override { return m_target_version; }
    QString getName() const override { return m_name; }
    std::vector<TableSchema> getTableVersions() const override { return m_table_schemas; }

    // execute the migration
    bool execute(DBConnection *db) override
    {
        // Add new blobs and remove unused sg columns
        QStringList queries = {
            "ALTER TABLE 'characters' ADD 'costume_data' BLOB", // add new costume_data blob to characters table
            "ALTER TABLE 'supergroups' ADD 'sg_data' BLOB",     // add new sg_data blob to supergroups table
            "ALTER TABLE characters DROP COLUMN sg_motto, sg_motd, sg_rank_names, sg_rank_perms, sg_emblem, sg_colors",
        };

        for(auto &q : queries)
        {
            db->m_query->prepare(q);
            if(!db->m_query->exec())
                return false;
        }

        // select the data from characters table
        db->m_query->prepare("SELECT * FROM 'costume'");
        if(!db->m_query->exec())
            return false;

        // copy costume data over to entity data blob
        while(db->m_query->next())
        {
            QJsonObject costume_obj = db->m_query->value("chardata").toJsonObject();
            db->loadBlob(costume_obj);
            //charObject["value0"].insert("LastOnline", ""); // cereal objects are wrapped in key 'value0'
            db->saveBlob(costume_obj);
            QJsonDocument costumedoc(costume_obj);
            //qDebug().noquote() << costumedoc.toJson(); // print output for debug

            QString querytext = QString("UPDATE characters SET chardata='%1', entitydata='%2'")
                    .arg(QString(chardoc.toJson()))
                    .arg(QString(entdoc.toJson()));
            if(!db->m_query->exec(querytext))
                return false;
        }

        // we're done, return true
        return true;
    }
};
